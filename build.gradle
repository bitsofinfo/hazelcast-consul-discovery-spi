buildscript {
	repositories {
    	mavenCentral()
    }
}

plugins {
    id "com.jfrog.bintray" version "1.5"
}

group = 'org.bitsofinfo'

allprojects {
	repositories {
		jcenter()
	}
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'java'
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

dependencies {

    compile group: 'com.hazelcast', name: 'hazelcast', version:"${hazelcast_version}"
    compile group: 'com.orbitz.consul', name: 'consul-client', version:"${consul_client_version}"
	compile group: 'commons-codec', name: 'commons-codec', version:"${commons_codec_version}"

    // for consul-client
    testCompile "org.apache.cxf:cxf-rt-rs-client:${cxf_rt_version}"
    testCompile "org.apache.cxf:cxf-rt-transports-http-hc:${cxf_rt_version}"
    testCompile "junit:junit:${junit_version}"
    
}

bintray {
	user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('bintrayUser')
	key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('bintrayApiKey')
    publications = ['hazelcastConsulDiscoverySpi']
    pkg {
        repo = 'maven'
        name = 'hazelcast-consul-discovery-spi'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/bitsofinfo/hazelcast-consul-discovery-spi'
        publicDownloadNumbers = true
        version {
		    name = project.property('version')
		    desc = project.property('version') + " : " + project.property('description')
		    released  = new Date()
		    vcsTag = project.property('version')
		}
    }
}

publishing {
    publications {
        hazelcastConsulDiscoverySpi(MavenPublication) {
            from components.java

            groupId project.property('group')
            artifactId 'hazelcast-consul-discovery-spi'
            version project.property('version')

            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('name', project.property('group')+":hazelcast-consul-discovery-spi")
                asNode().appendNode('description', project.property('description'))
                asNode().appendNode('url', "https://github.com/bitsofinfo/hazelcast-consul-discovery-spi")
                asNode().appendNode('packaging', "jar")
                asNode().appendNode('licenses').appendNode('license')
                    .appendNode('name', "The Apache License, Version 2.0").parent()
                    .appendNode('url', "http://www.apache.org/licenses/LICENSE-2.0.txt")
                asNode().appendNode('developers').appendNode('developer')
                    .appendNode('id', "bitsofinfo").parent()
                    .appendNode('name', "bitsofinfo").parent()
                    .appendNode('email', "bitsofinfo.g@gmail.com").parent()
                    .appendNode('organization',"bitsofinfo").parent()
                    .appendNode('organizationUrl','https://github.com/bitsofinfo')
                asNode().appendNode('scm')
                    .appendNode('connection', "scm:git:https://github.com/bitsofinfo/hazelcast-consul-discovery-spi.git").parent()
                    .appendNode('developerConnection', "scm:git:https://github.com/bitsofinfo/hazelcast-consul-discovery-spi.git").parent()
                    .appendNode('url', "https://github.com/bitsofinfo/hazelcast-consul-discovery-spi")   
            }

        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task runTests(type: Test) {
	description 'Runs unit tests for all tests except TestDoNothingRegistrator.'
  	
  	//Always run tests even when up-to-date 
  	outputs.upToDateWhen { 
  		false 
  	}
	
	systemProperties = [
  			consulHost: System.getProperty('consulHost', 'localhost'),
            consulPort: System.getProperty('consulPort', '8500'),
            consulAclToken: System.getProperty('consulAclToken', ''),
            consulSslEnabled: System.getProperty('consulSslEnabled', 'false'),
            consulSslServerCertFilePath: System.getProperty('consulSslServerCertFilePath', ''),
            consulSslServerCertBase64: System.getProperty('consulSslServerCertBase64', ''),
            consulSslServerHostnameVerify: System.getProperty('consulSslServerHostnameVerify', 'true'),
            consulHealthCheckProvider: System.getProperty('consulHealthCheckProvider', 'org.bitsofinfo.hazelcast.discovery.consul.ScriptHealthCheckBuilder')
    ]
    
	//Exclude TestDoNothingRegistrator test because it requires special setup 
    exclude "**/TestDoNothingRegistrator.class"
}

task unitTest(type: Test) {
	description 'Runs unit tests for single class.'
  	
  	//Always run tests even when up-to-date 
  	outputs.upToDateWhen { 
  		false 
  	}
  	
  	systemProperties = [
  			consulHost: System.getProperty('consulHost', 'localhost'),
            consulPort: System.getProperty('consulPort', '8500'),
            consulAclToken: System.getProperty('consulAclToken', ''),
            consulSslEnabled: System.getProperty('consulSslEnabled', 'false'),
            consulSslServerCertFilePath: System.getProperty('consulSslServerCertFilePath', ''),
            consulSslServerCertBase64: System.getProperty('consulSslServerCertBase64', ''),
            consulSslServerHostnameVerify: System.getProperty('consulSslServerHostnameVerify', 'true'),
            consulHealthCheckProvider: System.getProperty('consulHealthCheckProvider', 'org.bitsofinfo.hazelcast.discovery.consul.ScriptHealthCheckBuilder')
    ]
}

runTests {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
}

unitTest {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
    }
}

